{"version":3,"sources":["Api/index.js","Components/Suggestions/index.jsx","Components/AutocompletInputBox/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","Suggestions","suggestions","suggestionSelected","selectedIndex","hideSuggestions","onOutsideClick","className","map","suggestion","index","key","onClick","KEYBOARD_KEYS","AutocompletInputBox","props","getDataFromServer","textToSearch","a","response","setState","console","error","onInputChanged","event","previousText","state","inputText","split","slice","target","value","debouncedInputChange","words","splice","length","newInputText","join","concat","inputBoxRef","current","focus","onKeyDown","e","which","nextIndex","React","createRef","debounce","this","type","placeholder","ref","onChange","Component","Dashboard","Paths","Redirect","Routes","basename","process","path","component","from","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uVAKA,SAASA,EAAcC,GAGrB,OADIA,EADmB,MACCA,EADD,KAEhBC,KAAKC,MAFW,IAELD,KAAKE,UAA6BH,IAAM,EA+B7CI,MA5Bf,SAAwBC,GACtB,IAEMC,EAAU,GAahB,OAZIP,EAAc,IAChBO,EAAQC,KAJE,MAISF,GAEjBN,EAAc,IAChBO,EAAQC,KAAKF,GAEXN,EAAc,IAChBO,EAAQC,KAAKF,EATF,QAWTN,EAAc,IAChBO,EAAQC,KAbE,MAaSF,EAZR,QAcN,IAAIG,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAzBiB,IAyBDV,KAAKE,SAC3BS,YAAW,WACLb,EA5BY,IA6BdW,IAEAD,EAAQH,KAETK,O,QCDQE,G,MA5BK,SAAC,GAAD,IAClBC,EADkB,EAClBA,YACAC,EAFkB,EAElBA,mBACAC,EAHkB,EAGlBA,cACAC,EAJkB,EAIlBA,gBAJkB,OAMlB,kBAAC,IAAD,CAAgBC,eAAgBD,GAC9B,wBAAIE,UAAU,sBACXL,EAAYM,KAAI,SAACC,EAAYC,GAAb,OACf,wBACEC,IAAKF,EACLF,UAAS,wBAAmBH,IAAkBM,GAAS,aACvDE,QAAS,kBAAMT,EAAmBM,KAEjCA,U,QCfLI,EACE,GADFA,EAED,GAFCA,EAGC,GAsGQC,E,kDAlGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,kBAbmB,uCAaC,WAAOC,GAAP,eAAAC,EAAA,+EAEO1B,EAAeyB,GAFtB,OAEVE,EAFU,OAGhB,EAAKC,SAAS,CAAElB,YAAaiB,EAAUf,cAAe,IAHtC,gDAKhBiB,QAAQC,MAAM,mCAAd,MALgB,yDAbD,wDAsBpBC,eAAiB,SAACC,GACjB,IAAMC,EAAe,EAAKC,MAAMC,UAAUC,MAAM,KAAKC,OAAO,GAAG,GACvDZ,EAAeO,EAAMM,OAAOC,MAAMH,MAAM,KAAKC,OAAO,GAAG,GAE9D,EAAKT,SAAS,CAAEO,UAAWH,EAAMM,OAAOC,QAEnCd,GAAgBQ,IAAiBR,EACnC,EAAKe,qBAAqBf,GAE1B,EAAKZ,mBA/BU,EAoCnBF,mBAAqB,SAACM,GACpB,IAAMwB,EAAQ,EAAKP,MAAMC,UAAUC,MAAM,KACzCK,EAAMC,OAAOD,EAAME,OAAS,EAAG,EAAG1B,GAClC,IAAM2B,EAAeH,EAAMI,KAAK,KAAKC,OAAO,KAC5C,EAAKlB,SAAS,CAAEO,UAAWS,IAC3B,EAAK/B,kBACL,EAAKkC,YAAYC,QAAQC,SA1CR,EA6CpBpC,gBAAkB,WACf,EAAKe,SAAS,CAAElB,YAAa,GAAIE,cAAe,KA9C/B,EAiDpBsC,UAAY,SAACC,GAAO,IAAD,EACuB,EAAKjB,MAApCxB,EADQ,EACRA,YAAaE,EADL,EACKA,cACrB,GAA2B,IAAvBF,EAAYiC,OACd,OAAOQ,EAAEC,OACP,KAAK/B,EACH,IAAMgC,EAA8B,IAAlBzC,EAAsBF,EAAYiC,OAAS,EAAI/B,EAAgB,EAEjF,YADA,EAAKgB,SAAS,CAAEhB,cAAeyC,IAGjC,KAAKhC,EACH,IAAMgC,EAAYzC,IAAkBF,EAAYiC,OAAS,EAAI,EAAI/B,EAAgB,EAEjF,YADA,EAAKgB,SAAS,CAAEhB,cAAeyC,IAGjC,KAAKhC,EAEH,YADA,EAAKV,mBAAmBD,EAAYE,MA9D1C,EAAKsB,MAAQ,CACXC,UAAW,GACXzB,YAAa,GACbE,cAAe,GAIjB,EAAKmC,YAAcO,IAAMC,YACzB,EAAKf,qBAAuBgB,mBAAS,EAAKhC,kBAAmB,KAV5C,E,qDAuET,IAAD,EAC2CiC,KAAKvB,MAA/CC,EADD,EACCA,UAAWzB,EADZ,EACYA,YAAaE,EADzB,EACyBA,cAEhC,OACE,yBAAKG,UAAU,eACf,2BACE2C,KAAK,OACL3C,UAAU,eACV4C,YAAY,SACZpB,MAAOJ,EACXyB,IAAKH,KAAKV,YACNc,SAAUJ,KAAK1B,eACfmB,UAAWO,KAAKP,YAEfxC,EAAYiC,OAAS,GACrB,kBAAC,EAAD,CACGjC,YAAaA,EACbE,cAAeA,EACfC,gBAAiB4C,KAAK5C,gBACtBF,mBAAoB8C,KAAK9C,0B,GA3FH2C,IAAMQ,WCDzBC,G,MANG,kBAChB,yBAAKhD,UAAU,aACb,kBAAC,EAAD,SCDWiD,EALD,CACZD,UAAW,IACXE,SAAU,KCUGC,EAPA,kBACb,kBAAC,IAAD,CAAQC,SAAUC,gBAChB,kBAAC,IAAD,CAAOC,KAAML,EAAMD,UAAWO,UAAWP,IACzC,kBAAC,IAAD,CAAUQ,KAAMP,EAAMC,SAAUO,GAAIR,EAAMD,cCH/BU,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC5D,GACND,QAAQC,MAAMA,EAAM6D,c","file":"static/js/main.ce72bd0a.chunk.js","sourcesContent":["// Using mock code, as provided\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport OnOutsiceClick from \"react-outclick\";\nimport \"./Suggestions.css\";\n\n// The Dropdown Box\nconst Suggestions = ({\n  suggestions,\n  suggestionSelected,\n  selectedIndex,\n  hideSuggestions,\n}) => (\n  <OnOutsiceClick onOutsideClick={hideSuggestions}>\n    <ul className=\"dropdown-menu show\">\n      {suggestions.map((suggestion, index) => (\n        <li \n          key={suggestion}\n          className={`dropdown-item ${selectedIndex === index && 'highlight'}`}\n          onClick={() => suggestionSelected(suggestion)}\n        >\n          {suggestion}\n        </li>\n      ))}\n    </ul>\n  </OnOutsiceClick>\n);\n\nSuggestions.propTypes = {\n  suggestions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n  hideSuggestions: PropTypes.func.isRequired,\n  suggestionSelected: PropTypes.func.isRequired,\n};\n\nexport default Suggestions;\n","import React from \"react\";\nimport getSuggestions from \"../../Api\";\nimport Suggestions from \"../Suggestions\";\nimport { debounce } from \"lodash\";\n\nconst KEYBOARD_KEYS = {\n\tENTER: 13,\n\tUP:\t38,\n\tDOWN:\t40,\n};\n\nclass AutocompletInputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: \"\",\n      suggestions: [],\n      selectedIndex: 0,\n    };\n\n    // Creating the ref to input for the focus\n    this.inputBoxRef = React.createRef();\n    this.debouncedInputChange = debounce(this.getDataFromServer, 200);\n  }\n\n  getDataFromServer = async (textToSearch) => {\n    try {\n      const response = await getSuggestions(textToSearch);\n      this.setState({ suggestions: response, selectedIndex: 0 });\n    } catch (error) {\n      console.error('Got Error In Fetching Suggestion', error)\n    }\n  }\n\n\tonInputChanged = (event) => {\n\t\tconst previousText = this.state.inputText.split(' ').slice(-1)[0];\n    const textToSearch = event.target.value.split(' ').slice(-1)[0];\n    \n  \tthis.setState({ inputText: event.target.value });\n\n\t\tif (!!textToSearch && previousText !== textToSearch) {\n      this.debouncedInputChange(textToSearch);\n    } else {\n      this.hideSuggestions();\n    }\t\n\t}\n\t\n\t// Maintain all selected text by appending to current state\n  suggestionSelected = (suggestion) => {\n    const words = this.state.inputText.split(' ')\n    words.splice(words.length - 1, 1, suggestion);\n    const newInputText = words.join(' ').concat(' ');\n    this.setState({ inputText: newInputText });\n    this.hideSuggestions();\n    this.inputBoxRef.current.focus();\n  }\n\t\n\thideSuggestions = () => {\n    this.setState({ suggestions: [], selectedIndex: 0 });\n  }\n\n\tonKeyDown = (e) => {\n    const { suggestions, selectedIndex } = this.state;\n    if (suggestions.length !== 0) {\n      switch(e.which) {\n        case KEYBOARD_KEYS.UP: {\n          const nextIndex = selectedIndex === 0 ? suggestions.length - 1 : selectedIndex - 1\n          this.setState({ selectedIndex: nextIndex });\n          return;\n        }\n        case KEYBOARD_KEYS.DOWN: {\n          const nextIndex = selectedIndex === suggestions.length - 1 ? 0 : selectedIndex + 1\n          this.setState({ selectedIndex: nextIndex });\n          return;\n        }\n        case KEYBOARD_KEYS.ENTER: {\n          this.suggestionSelected(suggestions[selectedIndex])\n          return;\n        }\t\t\t\n      }\n    }\n\t}\n  \n  render() {\n    const { inputText, suggestions, selectedIndex } = this.state;\n\n    return (\n      <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search\"\n        value={inputText} \n\t\t\t\tref={this.inputBoxRef}\n        onChange={this.onInputChanged}\n        onKeyDown={this.onKeyDown}\n        />\n        {suggestions.length > 0 && (\n        \t<Suggestions\n            suggestions={suggestions}\n            selectedIndex={selectedIndex}\n            hideSuggestions={this.hideSuggestions}\n            suggestionSelected={this.suggestionSelected}\n          />\n        )}\n    </div>\n    );\n  }\n}\n\nexport default AutocompletInputBox;\n","import React from \"react\";\nimport AutocompletInputBox from \"../../Components/AutocompletInputBox\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = () => (\n  <div className=\"dashboard\">\n    <AutocompletInputBox />\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}